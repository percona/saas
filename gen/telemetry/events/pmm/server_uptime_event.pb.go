// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: telemetry/events/pmm/server_uptime_event.proto

package pmmv1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/mwitkow/go-proto-validators"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DistributionMethod represents PMM Server distribution method.
type DistributionMethod int32

const (
	// DISTRIBUTION_METHOD_INVALID represents unknown distribution method.
	DistributionMethod_DISTRIBUTION_METHOD_INVALID DistributionMethod = 0
	// DOCKER represents Docker distribution method.
	DistributionMethod_DOCKER DistributionMethod = 1
	// OVF represents Open Virtualization Format / Open Virtual Appliance distribution method.
	DistributionMethod_OVF DistributionMethod = 2
	// AMI represents Amazon Machine Image distribution method.
	DistributionMethod_AMI DistributionMethod = 3
	// AZURE represents Azure distribution method.
	DistributionMethod_AZURE DistributionMethod = 4
	// DO represents Digital Ocean distribution method.
	DistributionMethod_DO DistributionMethod = 5
)

// Enum value maps for DistributionMethod.
var (
	DistributionMethod_name = map[int32]string{
		0: "DISTRIBUTION_METHOD_INVALID",
		1: "DOCKER",
		2: "OVF",
		3: "AMI",
		4: "AZURE",
		5: "DO",
	}
	DistributionMethod_value = map[string]int32{
		"DISTRIBUTION_METHOD_INVALID": 0,
		"DOCKER":                      1,
		"OVF":                         2,
		"AMI":                         3,
		"AZURE":                       4,
		"DO":                          5,
	}
)

func (x DistributionMethod) Enum() *DistributionMethod {
	p := new(DistributionMethod)
	*p = x
	return p
}

func (x DistributionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DistributionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_events_pmm_server_uptime_event_proto_enumTypes[0].Descriptor()
}

func (DistributionMethod) Type() protoreflect.EnumType {
	return &file_telemetry_events_pmm_server_uptime_event_proto_enumTypes[0]
}

func (x DistributionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DistributionMethod.Descriptor instead.
func (DistributionMethod) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_events_pmm_server_uptime_event_proto_rawDescGZIP(), []int{0}
}

// ServerUptimeEvent contains basic information about PMM Server version,
// uptime, and distribution method.
type ServerUptimeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PMM Server unique identifier.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// PMM Server version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// PMM Server uptime.
	UpDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=up_duration,json=upDuration,proto3" json:"up_duration,omitempty"`
	// PMM Server distribution method.
	DistributionMethod DistributionMethod `protobuf:"varint,4,opt,name=distribution_method,json=distributionMethod,proto3,enum=percona.platform.telemetry.events.pmm.v1.DistributionMethod" json:"distribution_method,omitempty"`
	// PMM Server STT enabled.
	SttEnabled *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=stt_enabled,json=sttEnabled,proto3" json:"stt_enabled,omitempty"`
	// PMM Server IA enabled.
	IaEnabled *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=ia_enabled,json=iaEnabled,proto3" json:"ia_enabled,omitempty"`
}

func (x *ServerUptimeEvent) Reset() {
	*x = ServerUptimeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_events_pmm_server_uptime_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerUptimeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerUptimeEvent) ProtoMessage() {}

func (x *ServerUptimeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_events_pmm_server_uptime_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerUptimeEvent.ProtoReflect.Descriptor instead.
func (*ServerUptimeEvent) Descriptor() ([]byte, []int) {
	return file_telemetry_events_pmm_server_uptime_event_proto_rawDescGZIP(), []int{0}
}

func (x *ServerUptimeEvent) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServerUptimeEvent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerUptimeEvent) GetUpDuration() *durationpb.Duration {
	if x != nil {
		return x.UpDuration
	}
	return nil
}

func (x *ServerUptimeEvent) GetDistributionMethod() DistributionMethod {
	if x != nil {
		return x.DistributionMethod
	}
	return DistributionMethod_DISTRIBUTION_METHOD_INVALID
}

func (x *ServerUptimeEvent) GetSttEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.SttEnabled
	}
	return nil
}

func (x *ServerUptimeEvent) GetIaEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.IaEnabled
	}
	return nil
}

var File_telemetry_events_pmm_server_uptime_event_proto protoreflect.FileDescriptor

var file_telemetry_events_pmm_server_uptime_event_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x70, 0x6d, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x28, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67,
	0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x82, 0x03, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x80, 0x01, 0x10, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x70, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x75, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x6d, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x88, 0x01, 0x01, 0x52, 0x12, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x3b, 0x0a, 0x0b, 0x73, 0x74, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x69, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x61,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2a, 0x66, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a,
	0x1b, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x56,
	0x46, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4d, 0x49, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x4f, 0x10, 0x05, 0x42,
	0xd2, 0x02, 0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x6d, 0x6d, 0x2e, 0x76, 0x31,
	0x42, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x2d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6d, 0x6d, 0x3b, 0x70, 0x6d, 0x6d, 0x76, 0x31, 0xa2,
	0x02, 0x05, 0x50, 0x50, 0x54, 0x45, 0x50, 0xaa, 0x02, 0x28, 0x50, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x61, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6d, 0x6d, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x28, 0x50, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x5c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5c, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x50, 0x6d, 0x6d, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x34,
	0x50, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x5c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5c, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x5c, 0x50, 0x6d, 0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2d, 0x50, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x61, 0x3a, 0x3a,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x3a, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x50, 0x6d, 0x6d,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_telemetry_events_pmm_server_uptime_event_proto_rawDescOnce sync.Once
	file_telemetry_events_pmm_server_uptime_event_proto_rawDescData = file_telemetry_events_pmm_server_uptime_event_proto_rawDesc
)

func file_telemetry_events_pmm_server_uptime_event_proto_rawDescGZIP() []byte {
	file_telemetry_events_pmm_server_uptime_event_proto_rawDescOnce.Do(func() {
		file_telemetry_events_pmm_server_uptime_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_telemetry_events_pmm_server_uptime_event_proto_rawDescData)
	})
	return file_telemetry_events_pmm_server_uptime_event_proto_rawDescData
}

var file_telemetry_events_pmm_server_uptime_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_telemetry_events_pmm_server_uptime_event_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_telemetry_events_pmm_server_uptime_event_proto_goTypes = []interface{}{
	(DistributionMethod)(0),      // 0: percona.platform.telemetry.events.pmm.v1.DistributionMethod
	(*ServerUptimeEvent)(nil),    // 1: percona.platform.telemetry.events.pmm.v1.ServerUptimeEvent
	(*durationpb.Duration)(nil),  // 2: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil), // 3: google.protobuf.BoolValue
}
var file_telemetry_events_pmm_server_uptime_event_proto_depIdxs = []int32{
	2, // 0: percona.platform.telemetry.events.pmm.v1.ServerUptimeEvent.up_duration:type_name -> google.protobuf.Duration
	0, // 1: percona.platform.telemetry.events.pmm.v1.ServerUptimeEvent.distribution_method:type_name -> percona.platform.telemetry.events.pmm.v1.DistributionMethod
	3, // 2: percona.platform.telemetry.events.pmm.v1.ServerUptimeEvent.stt_enabled:type_name -> google.protobuf.BoolValue
	3, // 3: percona.platform.telemetry.events.pmm.v1.ServerUptimeEvent.ia_enabled:type_name -> google.protobuf.BoolValue
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_telemetry_events_pmm_server_uptime_event_proto_init() }
func file_telemetry_events_pmm_server_uptime_event_proto_init() {
	if File_telemetry_events_pmm_server_uptime_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telemetry_events_pmm_server_uptime_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerUptimeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telemetry_events_pmm_server_uptime_event_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telemetry_events_pmm_server_uptime_event_proto_goTypes,
		DependencyIndexes: file_telemetry_events_pmm_server_uptime_event_proto_depIdxs,
		EnumInfos:         file_telemetry_events_pmm_server_uptime_event_proto_enumTypes,
		MessageInfos:      file_telemetry_events_pmm_server_uptime_event_proto_msgTypes,
	}.Build()
	File_telemetry_events_pmm_server_uptime_event_proto = out.File
	file_telemetry_events_pmm_server_uptime_event_proto_rawDesc = nil
	file_telemetry_events_pmm_server_uptime_event_proto_goTypes = nil
	file_telemetry_events_pmm_server_uptime_event_proto_depIdxs = nil
}
