syntax = "proto3";

package percona.platform.telemetry.generic.v1;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "/telemetry/generic/reporter;reporterv1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Generic Telemetry reporter API",
    description: "Generic API for telemetryd service.",
  };
  extensions: {
    key: "x-readme";
    value: {
      struct_value: {
        fields: {
          key: "samples-languages"
          value: {
            list_value: {
              values: {string_value: "curl"}
              values: {string_value: "go"}
              values: {string_value: "node"}
              values: {string_value: "python"}
            }
          }
        }
      }
    }
  }
};

// ProductFamily represents Percona product family.
enum ProductFamily {
  PRODUCT_FAMILY_INVALID = 0;
  PRODUCT_FAMILY_PS = 1;
  PRODUCT_FAMILY_PXC = 2;
  PRODUCT_FAMILY_PSMDB = 3;
  PRODUCT_FAMILY_PBM = 4;
  PRODUCT_FAMILY_POSTGRESQL = 5;
  PRODUCT_FAMILY_PMM = 6;
  PRODUCT_FAMILY_EVEREST = 7;
  PRODUCT_FAMILY_PERCONA_TOOLKIT = 8;
  PRODUCT_FAMILY_PXB = 9;
}

// GenericReport contains set of metrics and service information.
// The exact metrics pairs (metric name, metric value) is defined by each product.
message GenericReport {
  // Report UUID.
  // Required.
  string id = 1 [(validator.field) = {
    uuid_ver: 0,
    string_not_empty: true
  }];
  // Time when this event was generated by the sender.
  // Required.
  google.protobuf.Timestamp create_time = 2 [(validator.field) = {msg_exists: true}];
  // Product instance unique identifier. UUID.
  // Required.
  string instance_id = 3 [(validator.field) = {
    uuid_ver: 0,
    string_not_empty: true
  }];
  // Product family.
  // Mandatory.
  ProductFamily product_family = 4 [(validator.field) = {is_in_enum: true}];

  message Metric {
    string key = 1;
    string value = 2;
  }
  // Metrics collection.
  // Optional.
  repeated Metric metrics = 7;
}

message ReportRequest {
  // One or more metric reports.
  repeated GenericReport reports = 1;
}

message ReportResponse {}

// ReporterAPI describes server API for reporting generic telemetry reports.
service ReporterAPI {
  // Report submits telemetry reports to the server.
  rpc GenericReport(ReportRequest) returns (ReportResponse) {
    option (google.api.http) = {
      post: "/v1/telemetry/GenericReport"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "GenericReport is used to submit generic telemetry reports to telemetryd service.";
      summary: "GenericReport";
      consumes: ["application/json"];
      produces: ["application/json"];
      responses: {
        key: "200";
        value: {
          examples: {
            key: "application/json"
            value: '{}'
          }
        };
      };
    };
  }
}
