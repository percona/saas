syntax = "proto3";

package percona.platform.telemetry.pillars.reporter.v1;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "/telemetry/pillars/reporter;reporterv1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Telemetry reporter API for Pillars",
    description: "API for Pillars telemetryd service.",
  };
  extensions: {
    key: "x-readme";
    value: {
      struct_value: {
        fields: {
          key: "samples-languages"
          value: {
            list_value: {
              values: {string_value: "curl"}
              values: {string_value: "go"}
              values: {string_value: "node"}
              values: {string_value: "python"}
            }
          }
        }
      }
    }
  }
};

// ReporterAPI describes server API for reporting telemetry events.
service ReporterAPI {
  // Report submits several telemetry events to the server.
  rpc Report(ReportRequest) returns (ReportResponse) {
    option (google.api.http) = {
      post: "/v1/telemetry/databases/Report"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Report is used to submit pillars telemetry events to telemetryd service.";
      summary: "Report";
      consumes: ["application/json"];
      produces: ["application/json"];
      responses: {
        key: "200";
        value: {
          examples: {
            key: "application/json"
            value: '{}'
          }
        };
      };
    };
  }
}

message ReportRequest {
  // One or more metrics to report.
  repeated Metric metrics = 1;
}

message ReportResponse {}

// Event contains original event and additional information added by the sender.
message Metric {
  // Event UUID.
  string id = 1;
  // Pillar Server UUID.
  string instance_id = 2;
  // Time when this event was created.
  google.protobuf.Timestamp create_time = 3 [(validator.field) = {msg_exists: true}];
  // Original event with serialized json format.
  bytes metrics = 4 [(validator.field) = {string_not_empty: true}];
}
