syntax = "proto3";

package percona.platform.telemetry.reporter.v1;

option go_package = "github.com/percona-platform/saas/gen/telemetry/reporter;reporterv1";

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "telemetry/reporter/event.proto";
import "telemetry/events/pmm/server_uptime_event.proto";
import "google/protobuf/duration.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

// ReporterAPI describes server API for reporting telemetry events.
service ReporterAPI {
  // Report submits several telemetry events to the server.
  rpc Report(ReportRequest) returns (ReportResponse) {
    option (google.api.http) = {
      post: "/v1/telemetry/Report"
      body: "*"
    };
  }
}

message ReportRequest {
  // One or more events to report.
  repeated Event events = 1;

  // One or more metrics events to report.
  // Only 'events' or 'metrics' field must be set.
  repeated ServerMetric metrics = 2;
}

message ReportResponse {}

// ServerMetrics contains PMM Server metrics.
// There are mandatory metrics and optional metric pairs.
// The exact metrics pairs (metric name, metric value) is defined by PMM Server.
message ServerMetric {
  // Event UUID.
  bytes id = 1 [
    (validator.field) = {
      length_eq: 16
    }
  ];
  // Time when this event was received by the sender.
  google.protobuf.Timestamp time = 2 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // PMM Server unique Telemetry identifier.
  // Mandatory.
  bytes pmm_server_telemetry_id = 3 [
    (validator.field) = {
      length_eq: 16
    }
  ];
  // PMM Server version.
  // Mandatory.
  string pmm_server_version = 4 [
    (validator.field) = {
      length_gt: 4
    }
  ];
  // PMM Server uptime.
  // Mandatory.
  google.protobuf.Duration up_duration = 5 [
    (validator.field) = {
      msg_exists: true
    }
  ];
  // PMM Server distribution method.
  // Mandatory.
  percona.platform.telemetry.events.pmm.v1.DistributionMethod distribution_method = 6 [
    (validator.field) = {
      is_in_enum: true
    }
  ];

  message Metric {
    string key = 1;
    string value = 2;
  }
  // PMM server metrics collection.
  // Optional.
  repeated Metric metrics = 7;
}