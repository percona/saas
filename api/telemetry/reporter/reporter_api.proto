syntax = "proto3";

package percona.platform.telemetry.reporter.v1;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "telemetry/events/pmm/server_uptime_event.proto";
import "telemetry/reporter/event.proto";
import "utils/fsp/fsp.proto";

option go_package = "/telemetry/reporter;reporterv1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Telemetry reporter API"
    description: "API for telemetryd service."
  }
  extensions: {
    key: "x-readme"
    value: {
      struct_value: {
        fields: {
          key: "samples-languages"
          value: {
            list_value: {
              values: {string_value: "curl"}
              values: {string_value: "go"}
              values: {string_value: "node"}
              values: {string_value: "python"}
            }
          }
        }
      }
    }
  }
};

// ReporterAPI describes server API for reporting telemetry events.
service ReporterAPI {
  // Report submits several telemetry events to the server.
  rpc Report(ReportRequest) returns (ReportResponse) {
    option (google.api.http) = {
      post: "/v1/telemetry/Report"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Report is used to submit telemetry events to telemetryd service."
      summary: "Report"
      consumes: ["application/json"]
      produces: ["application/json"]
      responses: {
        key: "200"
        value: {
          examples: {
            key: "application/json"
            value: '{}'
          }
        }
      }
    };
  }

  // SearchEvent searches for a specific metric in telemetry events and returns them to the client.
  // Can only be used by SuperAdmins.
  rpc SearchEvent(SearchEventRequest) returns (SearchEventResponse) {
    option (google.api.http) = {
      post: "/v1/telemetry/events:search"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "SearchEvent searches for a specific metric in telemetry events and returns them to the client."
      summary: "SearchEvent"
      consumes: ["application/json"]
      produces: ["application/json"]
    };
  }
}

message ReportRequest {
  // One or more events to report.
  repeated Event events = 1;

  // One or more metrics events to report.
  // Only 'events' or 'metrics' field must be set.
  repeated events.pmm.v1.ServerMetric metrics = 2;
}

message ReportResponse {}

message PMMServerMetric {
  // Name of the metric requested by the client.
  string metric_name = 1;
  // Value of the metric requested by the client.
  string metric_value = 2;
}

// PMMMetricEvent represents telemetry event containing metrics sent by PMM.
message PMMMetricEvent {
  // PMM Server UUID.
  string pmm_server_telemetry_id = 1;
  // Portal Organization UUID (Can be empty).
  string portal_org_id = 2;
  // Time when this event was created and received.
  google.protobuf.Timestamp event_time = 3;
  // Array of server metrics requested by the client.
  repeated PMMServerMetric metrics = 4;
}

message SearchEventRequest {
  // List of metrics requested by the client.
  repeated string metrics = 1;
  // Time range of events to search between.
  google.protobuf.Timestamp starts_at = 2;
  google.protobuf.Timestamp ends_at = 3;
  utils.fsp.PageParams page_params = 4;
}

message SearchEventResponse {
  // PMM metric events.
  repeated PMMMetricEvent events = 1;
  // pagination details.
  utils.fsp.PageTotals page_totals = 2;
}
