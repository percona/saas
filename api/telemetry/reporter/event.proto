syntax = "proto3";

package percona.platform.telemetry.reporter.v1;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "/telemetry/reporter;reporterv1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Telemetry reporter events API",
    description: "API describing serialized events received by telemetryd.",
  };
};

// AnyEvent represents a serialized telemetry event from the events sub-packages.
// It is similar to any.Any, but:
// * is not a well-known type, so no special support from the library (it is a good thing in our case);
// * may contain a JSON variant of serialization.
message AnyEvent {
  // A URL/resource name that uniquely identifies the type of the serialized
  // protocol buffer message.
  string type_url = 1 [(validator.field) = {regex: "^percona\\.platform\\.telemetry\\.events\\.\\w+\\.v1\\.\\w+Event$"}];
  // Must be a valid serialized protobuf binary of the above specified type.
  // Only binary or json field must be set.
  bytes binary = 2;
  // Must be a valid serialized protobuf JSON of the above specified type.
  // Only binary or json field must be set.
  string json = 3;
}

// Event contains original event and additional information added by the sender.
message Event {
  // Event UUID.
  bytes id = 1 [(validator.field) = {length_eq: 16}];
  // Time when this event was received by the sender.
  google.protobuf.Timestamp time = 2 [(validator.field) = {msg_exists: true}];
  // Original event with a well-known type URL.
  AnyEvent event = 3 [(validator.field) = {msg_exists: true}];
}
