syntax = "proto3";

package percona.platform.check.retrieval.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "/check/retrieval;retrievalv1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Check Retrieval API",
    description: "API for checked service.",
  };
  extensions: {
    key: "x-readme";
    value: {
      struct_value: {
        fields: {
          key: "samples-languages"
          value: {
            list_value: {
              values: {string_value: "curl"}
              values: {string_value: "go"}
              values: {string_value: "node"}
              values: {string_value: "python"}
            }
          }
        }
      }
    }
  }
};

// RetrievalAPI provides API for retrieving advisor checks
// and alerting rule templates from Percona Check Service.
service RetrievalAPI {
  // GetAllChecks returns all available checks.
  rpc GetAllChecks(GetAllChecksRequest) returns (GetAllChecksResponse) {
    option (google.api.http) = {
      post: "/v1/check/GetAllChecks"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Retrieves all check scripts a user is entitled to according to the tier.";
      summary: "Get all checks";
      consumes: ["application/json"];
      produces: ["application/json"];
    };
  }
  // GetAllAdvisors returns all available advisors.
  rpc GetAllAdvisors(GetAllAdvisorsRequest) returns (GetAllAdvisorsResponse) {
    option (google.api.http) = {
      post: "/v1/check/GetAllAdvisors"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Retrieves all advisors a user is entitled to according to the tier.";
      summary: "Get all advisors";
      consumes: ["application/json"];
      produces: ["application/json"];
    };
  }
  // GetAllAlertRuleTemplates returns all available alert rule templates.
  rpc GetAllAlertRuleTemplates(GetAllAlertRuleTemplatesRequest) returns (GetAllAlertRuleTemplatesResponse) {
    option (google.api.http) = {
      post: "/v1/check/GetAllAlertRuleTemplates"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Retrieves all alert rule templates a user is entitled to according to the tier.";
      summary: "Get all alert rule templates";
      consumes: ["application/json"];
      produces: ["application/json"];
    };
  }
  // GetAdvisorsInfo returns all available advisors information grouped by tiers.
  // It will only return advisors for a specific tier if requested by the client.
  rpc GetAdvisorsInfo(GetAdvisorsInfoRequest) returns (GetAdvisorsInfoResponse) {
    option (google.api.http) = {get: "/v1/check/advisors"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Retrieves info about advisors. If `limit_by_tier` parameter is set result will contain info only about advisors a user is entitled to according to the tier.";
      summary: "Get all advisors info";
      consumes: ["application/json"];
      produces: ["application/json"];
    };
  }
}

message GetAllChecksRequest {}

message GetAllChecksResponse {
  // List of advisor checks in YAML format.
  string file = 1;
  // File signatures.
  repeated string signatures = 2;
}

message GetAllAdvisorsRequest {}

message GetAllAdvisorsResponse {
  // List of advisors in YAML format.
  string file = 1;
  // File signatures.
  repeated string signatures = 2;
}

message GetAllAlertRuleTemplatesRequest {}

message GetAllAlertRuleTemplatesResponse {
  // List of alert rule templates in YAML format.
  string file = 1;
  // File signatures.
  repeated string signatures = 2;
}

message GetAdvisorsInfoRequest {
  bool limit_by_tier = 1;
}

message GetAdvisorsInfoResponse {
  // List of advisors mapped to their respective tiers.
  map<string, Advisors> advisors = 1;
}

message Advisors {
  repeated AdvisorInfo advisors = 1;
}

message AdvisorInfo {
  string name = 1;
  string summary = 2;
  string description = 3;
  string category = 4;
  repeated CheckInfo checks = 5;
}

message CheckInfo {
  string name = 1;
  string summary = 2;
  string description = 3;
}
